// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_betas
Eigen::MatrixXd get_betas(Eigen::MatrixXd full);
RcppExport SEXP _BootPermLm_get_betas(SEXP fullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type full(fullSEXP);
    rcpp_result_gen = Rcpp::wrap(get_betas(full));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_distribution
Eigen::MatrixXd bootstrap_distribution(Rcpp::NumericVector indices, Eigen::MatrixXd full, int num_samples);
RcppExport SEXP _BootPermLm_bootstrap_distribution(SEXP indicesSEXP, SEXP fullSEXP, SEXP num_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type full(fullSEXP);
    Rcpp::traits::input_parameter< int >::type num_samples(num_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_distribution(indices, full, num_samples));
    return rcpp_result_gen;
END_RCPP
}
// permutation_distribution
Eigen::MatrixXd permutation_distribution(Rcpp::NumericVector indices, Eigen::MatrixXd full, int num_samples);
RcppExport SEXP _BootPermLm_permutation_distribution(SEXP indicesSEXP, SEXP fullSEXP, SEXP num_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type full(fullSEXP);
    Rcpp::traits::input_parameter< int >::type num_samples(num_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(permutation_distribution(indices, full, num_samples));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BootPermLm_get_betas", (DL_FUNC) &_BootPermLm_get_betas, 1},
    {"_BootPermLm_bootstrap_distribution", (DL_FUNC) &_BootPermLm_bootstrap_distribution, 3},
    {"_BootPermLm_permutation_distribution", (DL_FUNC) &_BootPermLm_permutation_distribution, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_BootPermLm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
